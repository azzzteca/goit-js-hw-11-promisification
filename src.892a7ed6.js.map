{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","promise","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAIA,MAAMA,EAAQC,GAEL,IAAIC,QAAQC,IACjBC,WAAW,KACTD,EAAQF,IACPA,KAIDI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,KAQ1BC,OAPS,IAAId,QAAQC,IAK1BA,EAJqBW,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,OAanEL,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAI5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChB3B,MAAAA,EAAQoB,EAA0B,IAAK,KAEtC,OAAA,IAAIlB,QAAQ,CAACC,EAASyB,KAC3BxB,WAAW,KACUmB,KAAKE,SAAW,GAGjCtB,EAAQ,CAAE0B,GAAIF,EAAYE,GAAIvB,KAAMN,IAEpC4B,EAAOD,EAAYE,KAEpB7B,MAID8B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAQ/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH","file":"src.892a7ed6.js","sourceRoot":"../src","sourcesContent":["// import './sass/main.scss';\n\n// Подзадание 1\n\nconst delay = ms => {\n  // Твой код\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// Подзадание 2\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n  const promise = new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user,\n    );\n\n    resolve(updatedUsers);\n  });\n  return promise;\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// Подзадание 3\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n"]}